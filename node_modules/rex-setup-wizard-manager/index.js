// CODEREX Setup-wizard
// Version : 1.0.0

// Create a CSS class dynamically
function createCSSClass(className, style) {
  var styleTag = document.createElement('style');
  styleTag.type = 'text/css';
  styleTag.innerHTML = '.' + className + ' {' + style + '}';
  document.head.appendChild(styleTag);
}

// Function to add a class to an element
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else
    element.className += ' ' + className;
}

//main
function rexWizard(config) {
  const { general, steps } = config;

  // Setup base Wizard Container
  let wizardContainer =
    document.getElementById(general?.targetElement) ||
    createContainer(general?.targetElement, document.body);

  // Setup Progress Bar Container
  let progressBarContainer =
    document.getElementById("progressBarContainer") ||
    createContainer(
      "progressBarContainer",
      wizardContainer?.parentNode,
      wizardContainer
    );

  // Display logo if provided invoke
  manageLogo(general, progressBarContainer?.parentNode, progressBarContainer);

  // Initial rendering of progress bar and the current step
  updateProgressBar(progressBarContainer, steps, general?.currentStep);
  renderCurrentStep(wizardContainer, steps, general);

  // Container creation for wizard
  function createContainer(id, parent, beforeNode = null) {
    const container = document.createElement("div");
    container.id = id;

    //appplied some basic styles so that we can view something
    container.setAttribute(
      "style",
      "display:flex; align-items:center; justify-content:space-around"
    );

    if (beforeNode) {
      parent.insertBefore(container, beforeNode);
    } else {
      parent.appendChild(container);
    }
    return container;
  }

  // Display logo function definition
  function manageLogo(general, parent, beforeNode) {
    const { logo, logoStyles } = general;

    let logoImage = document.getElementById("wizardLogo");
    if (!logoImage && logo) {
      logoImage = document.createElement("img");
      logoImage.id = "wizardLogo";
      logoImage.src = logo;
      logoImage.alt = "Wizard Logo";

      const defaultLogoStyle = 'defaultLogoStyle';
      const pdefaultLogoStyle_style = 'display:flex; margin:10px auto; width:40px;';
      createCSSClass(defaultLogoStyle, pdefaultLogoStyle_style);

      logoImage.classList.add(logoStyles  || defaultLogoStyle);

      parent.insertBefore(logoImage, beforeNode);
    } else if (logoImage && logo) {
      logoImage.src = logo;
      
      const defaultLogoStyle = 'defaultLogoStyle';
      const pdefaultLogoStyle_style = 'display:flex; margin:10px auto; width:40px;';
      createCSSClass(defaultLogoStyle, pdefaultLogoStyle_style);

      logoImage.classList.add(logoStyles  || defaultLogoStyle);
    } }

  // Function to track Progress bar update on the basis of click
  function updateProgressBar(container, steps, currentStep) {
    container.innerHTML = "";
    const progressBar = document.createElement("div");

    // Define CSS rules for a class
    const pregress_bar_className = 'setup-wizard__pregress-bar';
    // const pregress_bar_style = 'width:100%; text-align: center; display:flex;';

    // Create the CSS class
    // createCSSClass(pregress_bar_className, pregress_bar_style);
    // Apply the CSS class to the <div> element
    addClass(progressBar, pregress_bar_className);

    steps?.forEach((step, index) => {
      const stepIndicator = document.createElement("div");

      stepIndicator.innerHTML = ``
      if (index === currentStep || index > currentStep) {
        stepIndicator.innerHTML = `  <p> <span>  ${index + 1}  </span>  ${step?.stepText}  </p> `
      }
      else {
        stepIndicator.innerHTML = `
            <p>
                <span>
                    <svg width="8" height="8" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0.935499 4.11026C0.75836 4.11077 0.584981 4.16272 0.435422 4.26009C0.285862 4.35746 0.166233 4.49629 0.0903747 4.66049C0.0145167 4.8247 -0.0144703 5.00759 0.00676735 5.18799C0.028005 5.36839 0.0985994 5.53894 0.210383 5.67991L2.59335 8.67442C2.67832 8.78265 2.78723 8.86851 2.91104 8.92489C3.03485 8.98127 3.16999 9.00652 3.30522 8.99857C3.59447 8.98263 3.8556 8.82391 4.02209 8.56294L8.97213 0.385047L8.97465 0.380997C9.0211 0.307842 9.00604 0.162868 8.91017 0.0717941C8.88383 0.0467839 8.85279 0.0275693 8.81894 0.0153333C8.78509 0.00309728 8.74916 -0.00190095 8.71336 0.00064652C8.67755 0.00319399 8.64264 0.0132332 8.61076 0.0301458C8.57888 0.0470584 8.55072 0.0704864 8.528 0.0989868C8.52623 0.101228 8.5244 0.103435 8.52251 0.105608L3.53034 5.89168C3.51134 5.91369 3.48827 5.93162 3.46246 5.94442C3.43666 5.95721 3.40863 5.96462 3.38001 5.9662C3.35139 5.96779 3.32274 5.96353 3.29574 5.95367C3.26874 5.9438 3.24392 5.92853 3.22272 5.90874L1.56591 4.3621C1.39384 4.20029 1.16893 4.11044 0.935499 4.11026Z"
                            fill="white" />
                    </svg> 
                </span> 
                ${step?.stepText}
            </p>
        `
      }

      // Define CSS rules for a class
      const progress_step_className = 'setup-wizard__pregress-step';
      // const progress_step_style = 'display: inline-block; position: relative; padding: 15px 68.5px 15px 16px; background: #E5E8F3;';

      // Create the CSS class
      // createCSSClass(progress_step_className, progress_step_style);

      // Apply the CSS class to the <div> element
      stepIndicator.classList.add(progress_step_className);
      stepIndicator.classList.add(index < currentStep ? "step-visited" : index === currentStep ? "step-active" : "step-not-visited");

      // stepIndicator.appendChild(stepData)
      progressBar.appendChild(stepIndicator);
    });
    container.appendChild(progressBar);
  }

  // Rendering current step of progress
  function renderCurrentStep(container, steps, general) {
    container.innerHTML = "";

    // show if title is provided with steps
    if (steps[general?.currentStep]?.title) {
      const title = document.createElement("h1");
      title.textContent = steps[general?.currentStep]?.title;
      container.appendChild(title);
    }

    // show if description is provided with steps
    if (steps[general?.currentStep]?.description) {
      const descriptionElem = document.createElement("p");
      descriptionElem.textContent = steps[general?.currentStep]?.description;
      container.appendChild(descriptionElem);
    }

    const contentContainer = document.createElement("div");
    const stepContent = document.createElement("div");

    // Define CSS rules for a class
    const contentContainer_className = 'setup-wizard__content';
    const contentContainer_style = 'width:1138px; height:812px; background:#ffffff; border-radius:10px; margin:0 auto; text-align:center;';

    createCSSClass(contentContainer_className, contentContainer_style);
    addClass(contentContainer, contentContainer_className);

    
    stepContent.innerHTML = steps[general?.currentStep]?.html;
    stepContent.className = "active-step";
    contentContainer.appendChild(stepContent);
    container.appendChild(contentContainer);
  }

  // Get current step number of progress
  function getCurrentStep() {
    return general?.currentStep;
  }

  // Step update function ,that can used for previous and next step
  function updateStep(newStep) {
    if (newStep < steps.length && newStep >= 0) {
      general.currentStep = newStep;
      renderCurrentStep(wizardContainer, steps, general);
      updateProgressBar(progressBarContainer, steps, general?.currentStep);
    }
  }

  // Step update function ,that can used for skip
  function skipToNextUnskippedStep(currentStep) {
    const nextStepIndex = steps?.findIndex(
      (step, index) => index > currentStep && !step.isSkip
    );
    if (nextStepIndex !== -1) {
      updateStep(nextStepIndex);
    } else {
      updateStep(steps?.length - 1);
    }
  }

  // Go to previous step function
  function previousStep() {
    updateStep(general?.currentStep - 1);
  }

  // Go to next step function
  function nextStep() {
    updateStep(general?.currentStep + 1);
  }

  // Step skip, function
  function skipStep() {
    skipToNextUnskippedStep(general?.currentStep);
  }

  //Return all
  return {
    rexWizard,
    previousStep,
    nextStep,
    skipStep,
    getCurrentStep: () => getCurrentStep(),
  };
}

module.exports = rexWizard;